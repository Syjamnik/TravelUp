// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelUp;

namespace TravelUp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200316203945_addedMTMRelation")]
    partial class addedMTMRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TravelUp.model.Travel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("TravelUp.model.TravelUserFavouriteList", b =>
                {
                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TravelId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("travelUserMTMs");
                });

            modelBuilder.Entity("TravelUp.model.TravelUserVisitedList", b =>
                {
                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TravelId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TravelUserVisitedList");
                });

            modelBuilder.Entity("TravelUp.model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelUp.model.Travel", b =>
                {
                    b.HasOne("TravelUp.model.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("TravelUp.model.TravelUserFavouriteList", b =>
                {
                    b.HasOne("TravelUp.model.Travel", "Travel")
                        .WithMany("OnFavouriteList")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelUp.model.User", "User")
                        .WithMany("OnFavouriteList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelUp.model.TravelUserVisitedList", b =>
                {
                    b.HasOne("TravelUp.model.Travel", "Travel")
                        .WithMany("OnVisitedList")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelUp.model.User", "User")
                        .WithMany("OnVisitedList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
